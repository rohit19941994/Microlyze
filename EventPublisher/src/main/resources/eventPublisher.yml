openapi: '3.0.2'
info:
  title: Your Service Definition Using Internal JSON Schema
  description: This is user Service API definition to enable its consumers to create, query, update details, and delete resource.
  version: '1.0.0'

# servers:
#   - url: http://192.168.18.222:1080/
#     description: Internal mockserver description

paths:
  /publishEvent:
    post:
      summary: This is event publisher method to publish the message.
      operationId: signInUser
      description: By passing in the appropriate attributes, you can log the event.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publisherRequest'

      responses:
        '201':
          description: Successfully created a new user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseData'
        '404':
          description: Error, NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseData'

components:
  schemas:
    publisherRequest:
      title: Request Message Structure (main)
      description: Request model for person and service information
      properties:
        eventLog:
          type: object
          example: "object Scalar"
        serviceInfo:
          $ref: '#/components/schemas/serviceInfo'

    publisherResponse:
      title: Request Message Structure (main)
      description: Request model for person and service information
      properties:
        SuccessResponseData:
          $ref: '#/components/schemas/successResponseData'
        ErrorResponseData:
          $ref: '#/components/schemas/errorResponseData'

    errorResponseData:
      title: Sample Response Message Structure for test service
      type: object
      properties:
        serviceInfo:
          $ref: '#/components/schemas/serviceInfo'
        error:
          $ref: '#/components/schemas/error'

    successResponseData:
      title: Success Response Structure (Main)
      description: Response model to show when a request is made successfully
      properties:
        status:
          $ref: '#/components/schemas/status'
        serviceInfo:
          $ref: '#/components/schemas/serviceInfo'

    serviceInfo:
      title: Service info definition
      properties:
        origin:
          type: string
          example: postman
        service:
          type: string
          example: Registration
        timestamp:
          type: string
          example: "2017-11-16T11:04:00Z"
        activity:
          type: string
          example: "Registeration"

    status:
      title: Status definition
      properties:
        message:
          type: string
          example: Message has been received

    error:
      title: Error definition
      properties:
        code:
          type: integer
          example: 404
        id:
          type: string
          example: "1"
        details:
          type: string
          example: HTTP Status will be NOT FOUND (CODE 404)

    graphqlDaoResponse:
      title: Dao response from the graphql
      properties:
        data:
          $ref: '#/components/schemas/data'

    data:
      title: Data object structure and definition
      properties:
        logEvent:
          $ref: '#/components/schemas/logEvent'

    logEvent:
      type: object
      properties:
        logs:
          type: object
          example: "string object"
