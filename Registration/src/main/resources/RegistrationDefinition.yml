openapi: '3.0.2'
info:
  title: Your Service Definition Using Internal JSON Schema
  description: This is user Service API definition to enable its consumers to create, query, update details, and delete resource.
  version: '1.0.0'

# servers:
#   - url: http://192.168.18.222:1080/
#     description: Internal mockserver description

paths:
  /signInUser:
    post:
      summary: This is signin method to deploy and login a user.
      operationId: signInUser
      description: By passing in the appropriate attributes, you can test service definition.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registrationRequest'

      responses:
        '201':
          description: Successfully created a new user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseData'
        '404':
          description: Error, NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseData'
  /registerUser:
    post:
      operationId: createUser
      tags:
        - user Account
      summary: To create new customer user account
      description: 'to POST information about customer including peron details and service info'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registrationRequest'
      responses:
        '201':
          description: Successfully created a new user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseData'
        '404':
          description: Error, NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseData'

components:
  schemas:
    registrationRequest:
      title: Request Message Structure (main)
      description: Request model for person and service information
      properties:
        requestData:
          $ref: '#/components/schemas/requestData'

    registrationResponse:
      title: Request Message Structure (main)
      description: Request model for person and service information
      properties:
        SuccessResponseData:
          $ref: '#/components/schemas/successResponseData'
        ErrorResponseData:
          $ref: '#/components/schemas/errorResponseData'

    errorResponseData:
      title: Sample Response Message Structure for test service
      type: object
      properties:
        serviceinfo:
          $ref: '#/components/schemas/serviceInfo'
        error:
          $ref: '#/components/schemas/error'

    successResponseData:
      title: Success Response Structure (Main)
      description: Response model to show when a request is made successfully
      properties:
        status:
          $ref: '#/components/schemas/status'
        serviceInfo:
          $ref: '#/components/schemas/serviceInfo'

    serviceInfo:
      title: Service info definition
      properties:
        origin:
          type: string
          example: postman
        service:
          type: string
          example: Registration
        timestamp:
          type: string
          example: "2017-11-16T11:04:00Z"
        activity:
          type: string
          example: "Registeration"

    status:
      title: Status definition
      properties:
        message:
          type: string
          example: Message has been received

    error:
      title: Error definition
      properties:
        code:
          type: integer
          example: 404
        id:
          type: string
          example: "1"
        details:
          type: string
          example: HTTP Status will be NOT FOUND (CODE 404)

    requestData:
      title: Request Data structure
      properties:
        person:
          $ref: '#/components/schemas/person'
        serviceInfo:
          $ref: '#/components/schemas/serviceInfo'
        contactMethod:
          $ref: '#/components/schemas/contactMethod'

    person:
      title: Person structure
      properties:
        naturalPerson:
          $ref: '#/components/schemas/naturalPerson'
        coreBioGraphic:
          $ref: '#/components/schemas/coreBioGraphic'

    naturalPerson:
      type: object
      properties:
        email:
          type: string
          example: "First"
        password:
          type: string
          example: Testing123
      required: [email, password]

    coreBioGraphic:
      type: object
      properties:
        firstName:
          type: string
          example: "First"
        lastName:
          type: string
          example: "Last"
        dob:
          type: string
          format: "dd-mm-yyyy"
        gender:
          type: string
          example: "Male"
      required:
        [firstName, lastName]

    contactMethod:
      title: Contact Method
      type: object
      properties:
        mobileNumber:
          type: string
          example: "+92012345678910"
        countryCode:
          type: string
          example: "PK"

    graphQlResponse:
      title: GraphQL Response Data Structure
      properties:
        data:
          $ref: '#/components/schemas/data'

    data:
      title: GraphQL Data Response
      properties:
        registerUser:
          $ref: '#/components/schemas/registerUser'
        signInUser:
          $ref: '#/components/schemas/signInUser'

    registerUser:
      title: Natural User Details
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: "First"
        status:
          type: string
          example: Successfully Registered

    signInUser:
      title: Legal User Details
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: "First"
        status:
          type: string
          example: Successfully signIn

    eventPublisherRequest:
      title: event publisher object structure and definition
      properties:
        eventLog:
            type: object
            example: actual payload of log
        serviceInfo:
          $ref: '#/components/schemas/serviceInfo'
